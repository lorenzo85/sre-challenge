# Cloud native PG database configuration.
database:
  # We use the Read-Write service endpoint on the database namespace.
  host: keycloak-db-rw.database.svc.cluster.local
  port: 5432
  name: keycloak
  storage:  1Gi
  # Must be Base64 encoded
  user: YXBw
  # Must be Base64 encoded
  password: cGFzc3dvcmQ=
  # The number of DB replicas. If 2, 1 is the master, the second is the replica.
  instances: 2

keycloak:
  # SSL Termination is done by Traefik ingress controller:
  # Edge proxy enables communication through HTTP between the proxy and Keycloak.
  # This mode is suitable for deployments with a highly secure internal network
  # where the reverse proxy (Traefik in our case) keeps a secure connection
  # (HTTP over TLS) with clients while communicating with Keycloak using HTTP.
  proxy: edge
  # Disable PostgreSQL dependency, as we will use DB from Cloudnative PG
  postgresql:
   enabled: false
  # We want to expose keycloak externally to the cluster. We enable the
  # ingress controller using traefik-ingress. The ingress SSL Certificate will
  # be automatically provisioned by cert-manager, thanks to the: cert-manager.io/cluster-issuer
  # annotation (see cert-manager chart).
  ingress:
    enabled: true
    tls: true
    hostname: keycloak.sre-challenge.com
    # Must match charts/traefik-ingress/Chart.yaml/name, as it is the name of the ingress resource,
    # created in Kubernetes.
    ingressClassName: traefik-ingress
    annotations:
      cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
  auth:
    # TLS is not enabled because SSL termination is done at the ingress controller level.
    tls:
      enabled: false
      autogenerated: false
  externalDatabase:
    existingSecret: keycloak-db-config
    existingSecretHostKey: host
    existingSecretPortKey: port
    existingSecretUserKey: user
    existingSecretDatabaseKey: database
    existingSecretPasswordKey: password
